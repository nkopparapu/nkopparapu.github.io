demo()
demo(package=graphics)
demo(package=.graphics)
demo(graphics)
local({pkg <- select.list(sort(.packages(all.available = TRUE)))
if(nchar(pkg)) library(pkg, character.only=TRUE)})
help.start()
load hdf5
local({pkg <- select.list(sort(.packages(all.available = TRUE)))
if(nchar(pkg)) library(pkg, character.only=TRUE)})
hdf5load("d:\downloads\AIRNOW_PM.001.timeAverae.0.hdf",load=TRUE,verbosity=1)
hdf5load("d:/downloads/AIRNOW_PM.001.timeAverae.0.hdf",load=TRUE,verbosity=1)
hdf5load("d:\\downloads\\AIRNOW_PM.001.timeAverae.0.hdf",load=TRUE,verbosity=1)
hdf5load("d:\\downloads\\AIRNOW_PM.001.timeAverae.0",load=TRUE,verbosity=1)
hdf5load("c:\\AIRNOW.hdf",load=TRUE,verbosity=1)
con=url("ftp://acdisc.gsfc.nasa.gov/data/s4pa///SORCE_Level3/SOR3TSI6//2003/sorce_tsi_L3_c06h_m29_v10_20030225_20100228.txt")
print(load(con))
print con
print(con)
con
con=url("http://acdisc.gsfc.nasa.gov/data/s4pa///SORCE_Level3/SOR3TSI6//2003/sorce_tsi_L3_c06h_m29_v10_20030225_20100228.txt")
print(load(con))
con=url("http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv")
print(load(con))
load(con)
con=url("http://finance.yahoo.com/q/hp?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&z=66&y=66")
load(con)
close(con)
loc1="http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv"
loc1="http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv"
loc1
con(loc1)
con=url(loc1)
load(con)
print(con)
con=url(loc1,open="rt")
print(load(con))
con=url(description="http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv",open="rt",blocking=TURE)
con=url(description="http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv",open="rt",blocking=TRUE)
isOpen(con)
readLines(con)
arr1=readLines(con=url(description="http://ichart.finance.yahoo.com/table.csv?s=URE&a=01&b=2&c=2007&d=02&e=7&f=2010&g=d&ignore=.csv",open="rt",blocking=TRUE))
arr1
close(con)
print
?
h
help
arr1[1]
arr1[2]
arr1[3]
arr1[3,1]
pi
arr1[3]
strsplit(arr1[3],",")
arr2=strsplit(arr1",")
arr2=strsplit(arr1,",")
arr2[0]
arr2[1]
arr2[2]
arr2[2,1]
arr2[2,2]
arr2[2][2]
arr2[2][1]
arr2[2][0]
dir(".")
dir("C:\\AIRNOW.hdf5")
dir("C:\\downloads\\AIRNOW.hdf5")
dir("C:\\downloads")
hdf5load("c:\\downloads\\AIRNOW.hdf5",load=TRUE,verbosity=1)
s1 = "C:\\downloads\\AIRNOW.hdf5")
s1 = "C:\\downloads\\AIRNOW.hdf5"
s1
dir(s1)
hdf5load(s1)
apropos("file")
file.info
q
()
quit
.q
file.info(s1)
hdf5load(s1,load=TRUE,verbosity=1)
objects()
arr1[1]
arr1[2]
arr2[2]
arr2[2][2]
(arr2[2])[2]
arr2[2,2]
length(arr2)
length(arr2[2])
arr2[2]$2
library("shiny", lib.loc="C:/Users/rao/Documents/R/win-library/3.0")
library("visualizationTools", lib.loc="C:/Users/rao/Documents/R/win-library/3.0")
library("xtable", lib.loc="C:/Users/rao/Documents/R/win-library/3.0")
demo()
demo('shiny')
demo(package = .packages(all.available = TRUE))
`companylist.(2)` <- read.csv("C:/Users/rao/Downloads/companylist (2).csv")
View(`companylist.(2)`)
amex.symbols <- read.csv("C:/Users/rao/Downloads/amex-symbols.csv")
View(amex.symbols)
plot(amex.symbols)
View(amex.symbols)
plot(amex.symbols.sector)
print amex.symbols[sector]
amex.symbols[sector]
amex.symbols['sector']
amex.symbols['Sector']
plot(amex.symbols['Sector'])
amex.symbols['Symbol']
amex.symbols['Symbol'][1]
amex.symbols['Symbol'][0]
amex.symbols['Symbol'][3]
amex.symbols['Symbol'][3,1]
amex.symbols['Symbol'][1,3]
amex.symbols['Symbol'][1,3]
amex.symbols['Symbol'][0]
amex.symbols[3]['Symbol']
amex.symbols[3,'Symbol']
amex.symbols[3]
nyseList <- read.csv(file="c:\\Users\\rao\\downloads\\nyse-symbols.csv",head=TRUE,sep=",")
nyseList <- read.csv(file="c:\\Users\\rao\\downloads\\nyse-symbols.csv",head=TRUE,sep=",")
cube = function(x,n) { x^3 }
cube(3)
x <- 1:10
if (x>5) { x = 0}
f = function(x) {g = function(y) { y+z}}
f = function(x) {g = function(y) { y+z} z=4; x+g(x)}
f = function(x) {g = function(y) { y+z} z=4 x+g(x)}
f = function(x) {g = function(y) { y+z}
z = 4
x+g(x) }
z = 10
f(3)
x = 5
y = if (x<3) {NA } else {10}
y
?text()
?boxplot()
?hist()
pbeta(0.75,1,1)
x = 1:4
p = x/sum(x)
temp = rbind(x,p)
rownames(temp) = c("x","Prob")
temp
mean(x)
mean(temp)
View(temp)
str(temp)
summary(temp)
Easter(2008)
tS <- timeSequence(Easter(2008, -14), Easter(2008, +14))
tS
# Subset weekdays and business days:
tW <- tS[isWeekday(tS)]; tW
dayOfWeek(tW)
tB <- tS[isBizday(tS, holidayZURICH())]; tB
dayOfWeek(tB)
install.packages("timeDate")
Easter(2008)
tS <- timeSequence(Easter(2008, -14), Easter(2008, +14))
tS
# Subset weekdays and business days:
tW <- tS[isWeekday(tS)]; tW
dayOfWeek(tW)
tB <- tS[isBizday(tS, holidayZURICH())]; tB
dayOfWeek(tB)
library("timeDate", lib.loc="C:/Users/rao/Documents/R/win-library/3.0")
Easter(2008)
tS <- timeSequence(Easter(2008, -14), Easter(2008, +14))
tS
# Subset weekdays and business days:
tW <- tS[isWeekday(tS)]; tW
dayOfWeek(tW)
tB <- tS[isBizday(tS, holidayZURICH())]; tB
dayOfWeek(tB)
types.plain <- c("p", "l", "o", "r", "g", "s", "S", "h", "a", "smooth")
types.horiz <- c("s", "S", "h", "a", "smooth")
horiz <- rep(c(FALSE, TRUE), c(length(types.plain), length(types.horiz)))
types <- c(types.plain, types.horiz)
x <- sample(seq(-10, 10, length.out = 15), 30, TRUE)
y <- x + 0.25 * (x + 1)^2 + rnorm(length(x), sd = 5)
xyplot(y ~ x | gl(1, length(types)),
xlab = "type",
ylab = list(c("horizontal=TRUE", "horizontal=FALSE"), y = c(1/6, 4/6)),
as.table = TRUE, layout = c(5, 3),
between = list(y = c(0, 1)),
strip = function(...) {
panel.fill(trellis.par.get("strip.background")$col[1])
type <- types[panel.number()]
grid::grid.text(label = sprintf('"%s"', type),
x = 0.5, y = 0.5)
grid::grid.rect()
},
scales = list(alternating = c(0, 2), tck = c(0, 0.7), draw = FALSE),
par.settings =
list(layout.widths = list(strip.left = c(1, 0, 0, 0, 0))),
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal)
})[rep(1, length(types))]
library("lattice", lib.loc="C:/Program Files/R/R-3.0.2/library")
types.plain <- c("p", "l", "o", "r", "g", "s", "S", "h", "a", "smooth")
types.horiz <- c("s", "S", "h", "a", "smooth")
horiz <- rep(c(FALSE, TRUE), c(length(types.plain), length(types.horiz)))
types <- c(types.plain, types.horiz)
x <- sample(seq(-10, 10, length.out = 15), 30, TRUE)
y <- x + 0.25 * (x + 1)^2 + rnorm(length(x), sd = 5)
xyplot(y ~ x | gl(1, length(types)),
xlab = "type",
ylab = list(c("horizontal=TRUE", "horizontal=FALSE"), y = c(1/6, 4/6)),
as.table = TRUE, layout = c(5, 3),
between = list(y = c(0, 1)),
strip = function(...) {
panel.fill(trellis.par.get("strip.background")$col[1])
type <- types[panel.number()]
grid::grid.text(label = sprintf('"%s"', type),
x = 0.5, y = 0.5)
grid::grid.rect()
},
scales = list(alternating = c(0, 2), tck = c(0, 0.7), draw = FALSE),
par.settings =
list(layout.widths = list(strip.left = c(1, 0, 0, 0, 0))),
panel = function(...) {
type <- types[panel.number()]
horizontal <- horiz[panel.number()]
panel.xyplot(...,
type = type,
horizontal = horizontal)
})[rep(1, length(types))]
err = qnorm(0.975)*4/sqrt(100)
err
12+err
x = c(8,3,-1,2,5)
t.test(x)
ppois(9,17.87,lower.tail=FALSE)
0.01/(0.04/sqrt(100))
1.645-2.5
pnorm(-0.855,lower.tail=F)
pnorm(0.95,mean=12,sd=4,lower.tail=F)
pnorm(0.95,mean=12,sd=4)
pnorm(0.95,mean=12,sd=4,lower.tail=F)
1.96*4
=12+7.84
12+7.84
power.t.test(power=.90, alternative="one.sided", sd=0.04,sig.levevl=0.05)
power.t.test(power=.90, alternative="one.sided", sd=0.04)
power.t.test(power=.90, alternative="one.sided", sd=0.04,delta=0,sig.level=0.05)
power.t.test(power=.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05)
power.t.test(n=100, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05)
1-0.9835
binom.test(3,n=4,p=0.5, alternative = "greater")
binom.test(3,n=4,p=0.5, alternative = "greater")
7/8
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*7/12)
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*8/12)
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*9/12)
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*10/12)
power.t.test(power=.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05, type="one.sample")
power.t.test(n=100, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05,type="one.sample")
12*1.65
0.01/(0.04/sqrt(100))
pnorm(0.95,mean=12,sd=4,lower.tail=F)
1.65*4
12+6.6
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05,type="one.sample")
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05)
1-0.9835
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*10/12)
(25 * 7/8) + (25 *10/11) + (25*9/9) + (25*9/12)
1.645*4
12+6.58
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05, type="paired")
138.56*2
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05, type="one.sample")
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05, type="two.sample")
power.t.test(p=0.90, alternative="one.sided", sd=0.04,delta=0.01,sig.level=0.05, type="paired")
library(datasets)
data(mtcars)
t.test()
t.test(mpg, data=mtcars)
str(mtcars)
t.test(mtcars$mpg, data=mtcars)
35/40
36/40
library(UsingR)
install.packages("UsingR")
library(UsingR)
install.packages(c("caTools", "httpuv", "Rcpp", "RJSONIO", "shiny", "xtable"))
install.packages("ProjectTemplate")
library("ProjectTemplate", lib.loc="C:/Users/rao/Documents/R/win-library/3.1")
install.packages("swirl")
library(swirn)
library(swirl)
swirl()
install_from_swirl("Data Analysis")
install_from_swirl("Mathematical Biostatistics Boot Camp")
install_from_swirl("Regression Models")
library("shiny", lib.loc="C:/Users/rao/Documents/R/win-library/3.1")
library(devtools)
detach("package:utils", unload=TRUE)
library("utils", lib.loc="C:/Program Files/R/R-3.1.0/library")
install_package(Rtools)
install.packages("rtools")
install_github('slidify','ramnathv')
setwd("D:/projects/R")
library(slidify)
author("ShinyStocks-slidify")
